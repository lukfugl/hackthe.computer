#!/usr/bin/env ruby

raise ArgumentError unless ARGV.size == 1
raise ArgumentError unless ARGV.first =~ /^--request_size=(\d+)$/
n = $1.to_i

database = []
while line = STDIN.gets
  line.chomp!
  break if line.empty?
  value = line.to_i # trusting ruby's bigints, maybe a mistake
  database << value
end

def partition(bucket, b, k)
  return [nil, bucket] if bucket.size < k
  zero = one = nil
  loop do
    zero, one = bucket.partition{ |i| (i >> b) % 2 == 0 }
    break unless zero.empty? || one.empty?
    b -= 1
  end
  zero = partition(zero, b - 1, k)
  one = partition(one, b - 1, k)
  return [b, zero, one]
end

database = partition(database, 63, 16)

def nearest(bucket, n, k)
  if bucket.first.nil?
    # leaf bucket
    bucket.last.sort_by{ |x| x ^ n }.first(k)
 else
    # branch bucket
    b, zero, one = bucket
    order = ((n >> b) % 2 == 0) ? [zero, one] : [one, zero]
    result = nearest(order.first, n, k)
    k -= result.size
    result.concat(nearest(order.last, n, k)) if k > 0
    result
  end
end

# partition as "everything >= 2^31, then everything >= 2^30, then ... then everything >= 2^10
while line = STDIN.gets
  line.chomp!
  break if line.empty?
  value = line.to_i
  nearest(database, value, n).each do |neighbor, _|
    puts neighbor
  end
end
